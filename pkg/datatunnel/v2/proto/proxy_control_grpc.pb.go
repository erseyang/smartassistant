// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ProxyControllerClient is the client API for ProxyController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyControllerClient interface {
	// 最初版本的控制流，后续message修改增加新版本接口，用于兼容
	ControlStream(ctx context.Context, opts ...grpc.CallOption) (ProxyController_ControlStreamClient, error)
}

type proxyControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyControllerClient(cc grpc.ClientConnInterface) ProxyControllerClient {
	return &proxyControllerClient{cc}
}

func (c *proxyControllerClient) ControlStream(ctx context.Context, opts ...grpc.CallOption) (ProxyController_ControlStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyController_serviceDesc.Streams[0], "/proxy.control.proto.ProxyController/ControlStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyControllerControlStreamClient{stream}
	return x, nil
}

type ProxyController_ControlStreamClient interface {
	Send(*ProxyControlStreamMsg) error
	Recv() (*ProxyControlStreamMsg, error)
	grpc.ClientStream
}

type proxyControllerControlStreamClient struct {
	grpc.ClientStream
}

func (x *proxyControllerControlStreamClient) Send(m *ProxyControlStreamMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyControllerControlStreamClient) Recv() (*ProxyControlStreamMsg, error) {
	m := new(ProxyControlStreamMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyControllerServer is the server API for ProxyController service.
// All implementations must embed UnimplementedProxyControllerServer
// for forward compatibility
type ProxyControllerServer interface {
	// 最初版本的控制流，后续message修改增加新版本接口，用于兼容
	ControlStream(ProxyController_ControlStreamServer) error
	mustEmbedUnimplementedProxyControllerServer()
}

// UnimplementedProxyControllerServer must be embedded to have forward compatible implementations.
type UnimplementedProxyControllerServer struct {
}

func (UnimplementedProxyControllerServer) ControlStream(ProxyController_ControlStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ControlStream not implemented")
}
func (UnimplementedProxyControllerServer) mustEmbedUnimplementedProxyControllerServer() {}

// UnsafeProxyControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyControllerServer will
// result in compilation errors.
type UnsafeProxyControllerServer interface {
	mustEmbedUnimplementedProxyControllerServer()
}

func RegisterProxyControllerServer(s *grpc.Server, srv ProxyControllerServer) {
	s.RegisterService(&_ProxyController_serviceDesc, srv)
}

func _ProxyController_ControlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyControllerServer).ControlStream(&proxyControllerControlStreamServer{stream})
}

type ProxyController_ControlStreamServer interface {
	Send(*ProxyControlStreamMsg) error
	Recv() (*ProxyControlStreamMsg, error)
	grpc.ServerStream
}

type proxyControllerControlStreamServer struct {
	grpc.ServerStream
}

func (x *proxyControllerControlStreamServer) Send(m *ProxyControlStreamMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyControllerControlStreamServer) Recv() (*ProxyControlStreamMsg, error) {
	m := new(ProxyControlStreamMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProxyController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proxy.control.proto.ProxyController",
	HandlerType: (*ProxyControllerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ControlStream",
			Handler:       _ProxyController_ControlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/datatunnel/v2/proto/proxy_control.proto",
}
